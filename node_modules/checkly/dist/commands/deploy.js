"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api = require("../rest/api");
const config_1 = require("../services/config");
const prompts = require("prompts");
const core_1 = require("@oclif/core");
const authCommand_1 = require("./authCommand");
const project_parser_1 = require("../services/project-parser");
const checkly_config_loader_1 = require("../services/checkly-config-loader");
const api_1 = require("../rest/api");
const constructs_1 = require("../constructs");
const chalk = require("chalk");
const util_1 = require("../services/util");
const common_messages_1 = require("../messages/common-messages");
// eslint-disable-next-line no-restricted-syntax
var ResourceDeployStatus;
(function (ResourceDeployStatus) {
    ResourceDeployStatus["UPDATE"] = "UPDATE";
    ResourceDeployStatus["CREATE"] = "CREATE";
    ResourceDeployStatus["DELETE"] = "DELETE";
})(ResourceDeployStatus || (ResourceDeployStatus = {}));
class Deploy extends authCommand_1.AuthCommand {
    async run() {
        var _a, _b, _c, _d, _e, _f, _g;
        core_1.ux.action.start('Parsing your project', undefined, { stdout: true });
        const { flags } = await this.parse(Deploy);
        const { force, preview, 'schedule-on-deploy': scheduleOnDeploy, output, config: configFilename } = flags;
        const { configDirectory, configFilenames } = (0, util_1.splitConfigFilePath)(configFilename);
        const { config: checklyConfig, constructs: checklyConfigConstructs, } = await (0, checkly_config_loader_1.loadChecklyConfig)(configDirectory, configFilenames);
        const { data: avilableRuntimes } = await api_1.runtimes.getAll();
        const project = await (0, project_parser_1.parseProject)({
            directory: configDirectory,
            projectLogicalId: checklyConfig.logicalId,
            projectName: checklyConfig.projectName,
            repoUrl: checklyConfig.repoUrl,
            checkMatch: (_a = checklyConfig.checks) === null || _a === void 0 ? void 0 : _a.checkMatch,
            browserCheckMatch: (_c = (_b = checklyConfig.checks) === null || _b === void 0 ? void 0 : _b.browserChecks) === null || _c === void 0 ? void 0 : _c.testMatch,
            ignoreDirectoriesMatch: (_d = checklyConfig.checks) === null || _d === void 0 ? void 0 : _d.ignoreDirectoriesMatch,
            checkDefaults: checklyConfig.checks,
            browserCheckDefaults: (_e = checklyConfig.checks) === null || _e === void 0 ? void 0 : _e.browserChecks,
            availableRuntimes: avilableRuntimes.reduce((acc, runtime) => {
                acc[runtime.name] = runtime;
                return acc;
            }, {}),
            checklyConfigConstructs,
        });
        const repoInfo = (0, util_1.getGitInformation)(project.repoUrl);
        core_1.ux.action.stop();
        const projectPayload = project.synthesize(false);
        if (!projectPayload.resources.length) {
            if (preview) {
                this.log('\nNo checks were detected. More information on how to set up a Checkly CLI project is available at https://checklyhq.com/docs/cli/.\n');
                return;
            }
            else {
                throw new Error('Failed to deploy your project. Unable to find constructs to deploy.\nMore information on how to set up a Checkly CLI project is available at https://checklyhq.com/docs/cli/.\n');
            }
        }
        const { data: account } = await api.accounts.get(config_1.default.getAccountId());
        if (!force && !preview) {
            const { confirm } = await prompts({
                name: 'confirm',
                type: 'confirm',
                message: `You are about to deploy your project "${project.name}" to account "${account.name}". Do you want to continue?`,
            });
            if (!confirm) {
                return;
            }
        }
        try {
            const { data } = await api.projects.deploy({ ...projectPayload, repoInfo }, { dryRun: preview, scheduleOnDeploy });
            if (preview || output) {
                this.log(this.formatPreview(data, project));
            }
            if (!preview) {
                await core_1.ux.wait(500);
                this.log(`Successfully deployed project "${project.name}" to account "${account.name}".`);
            }
        }
        catch (err) {
            if (((_f = err === null || err === void 0 ? void 0 : err.response) === null || _f === void 0 ? void 0 : _f.status) === 400) {
                throw new Error(`Failed to deploy your project due to wrong configuration. ${(_g = err.response.data) === null || _g === void 0 ? void 0 : _g.message}`);
            }
            else {
                throw new Error(`Failed to deploy your project. ${err.message}`);
            }
        }
    }
    formatPreview(previewData, project) {
        var _a, _b;
        // Current format of the data is: { checks: { logical-id-1: 'UPDATE' }, groups: { another-logical-id: 'CREATE' } }
        // We convert it into update: [{ logicalId, resourceType, construct }, ...], create: [], delete: []
        // This makes it easier to display.
        const updating = [];
        const creating = [];
        const deleting = [];
        for (const change of (_a = previewData === null || previewData === void 0 ? void 0 : previewData.diff) !== null && _a !== void 0 ? _a : []) {
            const { type, logicalId, action } = change;
            if ([
                constructs_1.AlertChannelSubscription.__checklyType,
                constructs_1.PrivateLocationCheckAssignment.__checklyType,
                constructs_1.PrivateLocationGroupAssignment.__checklyType,
            ].some(t => t === type)) {
                // Don't report changes to alert channel subscriptions or private location assignments.
                // User's don't create these directly, so it's more intuitive to consider it as part of the check.
                continue;
            }
            const construct = project.data[type][logicalId];
            if (action === ResourceDeployStatus.UPDATE) {
                updating.push({ resourceType: type, logicalId, construct });
            }
            else if (action === ResourceDeployStatus.CREATE) {
                creating.push({ resourceType: type, logicalId, construct });
            }
            else if (action === ResourceDeployStatus.DELETE) {
                // Since the resource is being deleted, the construct isn't in the project.
                deleting.push({ resourceType: type, logicalId });
            }
        }
        // testOnly checks weren't sent to the BE and won't be in previewData.
        // We load them from the `project` instead.
        const skipping = project
            .getTestOnlyConstructs().map(construct => ({
            logicalId: construct.logicalId,
            resourceType: construct.type,
            construct,
        }))
            // There is an edge case when the check already exists in Checkly, but `testOnly: true` was just added.
            // In this case, the check will be included in both `deleting` and `skipping`.
            // To avoid displaying the check twice, we detect this case and only show the check in `deleting`.
            // This implementation is O(n^2), but could be sped up with a map or set.
            .filter((skip) => !deleting.find(deletion => deletion.logicalId === skip.logicalId && deletion.resourceType === skip.resourceType));
        // Having some order will make the output easier to read.
        const compareEntries = (a, b) => a.resourceType.localeCompare(b.resourceType) ||
            a.logicalId.localeCompare(b.logicalId);
        // filter resources without contructs that are created dynamically
        // on the flight (i.e. a non project member private-location)
        const sortedUpdating = updating
            .filter(({ construct }) => Boolean(construct))
            .sort(compareEntries);
        // filter resources without contructs that are created dynamically
        // on the flight (i.e. a non project member private-location)
        const sortedCreating = creating
            .filter(({ construct }) => Boolean(construct))
            .sort(compareEntries);
        const sortedDeleting = deleting
            .sort(compareEntries);
        if (!sortedCreating.length && !sortedDeleting.length && !sortedUpdating.length && !skipping.length) {
            return '\nNo checks were detected. More information on how to set up a Checkly CLI project is available at https://checklyhq.com/docs/cli/.\n';
        }
        const output = [];
        if (sortedCreating.filter(({ construct }) => Boolean(construct)).length) {
            output.push(chalk.bold.green('Create:'));
            for (const { logicalId, construct } of sortedCreating) {
                output.push(`    ${construct.constructor.name}: ${logicalId}`);
            }
            output.push('');
        }
        if (sortedDeleting.length) {
            output.push(chalk.bold.red('Delete:'));
            const prettyResourceTypes = {
                [constructs_1.Check.__checklyType]: 'Check',
                [constructs_1.AlertChannel.__checklyType]: 'AlertChannel',
                [constructs_1.CheckGroup.__checklyType]: 'CheckGroup',
                [constructs_1.MaintenanceWindow.__checklyType]: 'MaintenanceWindow',
                [constructs_1.PrivateLocation.__checklyType]: 'PrivateLocation',
                [constructs_1.Dashboard.__checklyType]: 'Dashboard',
            };
            for (const { resourceType, logicalId } of sortedDeleting) {
                output.push(`    ${(_b = prettyResourceTypes[resourceType]) !== null && _b !== void 0 ? _b : resourceType}: ${logicalId}`);
            }
            output.push('');
        }
        if (sortedUpdating.length) {
            output.push(chalk.bold.magenta('Update and Unchanged:'));
            for (const { logicalId, construct } of sortedUpdating) {
                output.push(`    ${construct.constructor.name}: ${logicalId}`);
            }
            output.push('');
        }
        if (skipping.length) {
            output.push(chalk.bold.grey('Skip (testOnly):'));
            for (const { logicalId, construct } of skipping) {
                output.push(`    ${construct.constructor.name}: ${logicalId}`);
            }
            output.push('');
        }
        return output.join('\n');
    }
}
exports.default = Deploy;
Deploy.coreCommand = true;
Deploy.hidden = false;
Deploy.description = 'Deploy your project to your Checkly account.';
Deploy.flags = {
    preview: core_1.Flags.boolean({
        char: 'p',
        description: 'Show a preview of the changes made by the deploy command.',
        default: false,
    }),
    output: core_1.Flags.boolean({
        char: 'o',
        description: 'Shows the changes made after the deploy command.',
        default: false,
    }),
    'schedule-on-deploy': core_1.Flags.boolean({
        description: 'Enables automatic check scheduling after a deploy.',
        default: true,
        allowNo: true,
    }),
    force: core_1.Flags.boolean({
        char: 'f',
        description: common_messages_1.default.forceMode,
        default: false,
    }),
    config: core_1.Flags.string({
        char: 'c',
        description: common_messages_1.default.configFile,
    }),
};
//# sourceMappingURL=deploy.js.map