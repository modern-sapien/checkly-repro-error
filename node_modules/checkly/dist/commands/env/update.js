"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api = require("../../rest/api");
const core_1 = require("@oclif/core");
const authCommand_1 = require("../authCommand");
class EnvUpdate extends authCommand_1.AuthCommand {
    async run() {
        var _a;
        const { flags, args } = await this.parse(EnvUpdate);
        const { locked } = flags;
        const envVariableName = args.key;
        let envValue = '';
        // check if env variable arg exists
        if (args.value) {
            envValue = args.value;
        }
        else {
            envValue = await core_1.ux.prompt(`What is the value of ${envVariableName}?`, { type: 'mask' });
        }
        try {
            await api.environmentVariables.update(envVariableName, envValue, locked);
            this.log(`Environment variable ${envVariableName} updated.`);
        }
        catch (err) {
            if (((_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status) === 404) {
                throw new Error(`Environment variable ${envVariableName} not found.`);
            }
            throw err;
        }
    }
}
exports.default = EnvUpdate;
EnvUpdate.hidden = false;
EnvUpdate.description = 'Update environment variable via "checkly env update <key> <value>".';
EnvUpdate.flags = {
    locked: core_1.Flags.boolean({
        char: 'l',
        description: 'Indicate if environment variable is locked.',
        default: false,
    }),
};
EnvUpdate.args = {
    key: core_1.Args.string({
        name: 'arguments',
        required: true,
        description: 'Environment variable key.',
    }),
    value: core_1.Args.string({
        name: 'arguments',
        required: false,
        description: 'Environment variable value.',
    }),
};
//# sourceMappingURL=update.js.map