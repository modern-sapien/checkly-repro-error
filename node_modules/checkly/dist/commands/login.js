"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Login_instances, _Login_promptForLoginOrSignUp;
Object.defineProperty(exports, "__esModule", { value: true });
exports.selectAccount = void 0;
const open = require("open");
const chalk = require("chalk");
const baseCommand_1 = require("./baseCommand");
const prompts = require("prompts");
const config_1 = require("../services/config");
const api = require("../rest/api");
const auth_1 = require("../auth");
const selectAccount = async (accounts) => {
    if (accounts.length === 1) {
        return accounts[0];
    }
    const { selectedAccount } = await prompts({
        name: 'selectedAccount',
        type: 'select',
        choices: accounts.map(account => ({ title: account.name, value: account })),
        message: 'Which account do you want to use?',
    });
    return selectedAccount;
};
exports.selectAccount = selectAccount;
class Login extends baseCommand_1.BaseCommand {
    constructor() {
        super(...arguments);
        _Login_instances.add(this);
        this._checkExistingCredentials = async () => {
            if (config_1.default.hasEnvVarsConfigured()) {
                this.warn('`CHECKLY_API_KEY` ' +
                    'or `CHECKLY_ACCOUNT_ID` environment variables are configured. You must delete them to use `npx checkly login`.');
                this.exit(0);
            }
            const hasValidCredentials = config_1.default.hasValidCredentials();
            if (hasValidCredentials) {
                const { setNewkey } = await prompts({
                    name: 'setNewkey',
                    type: 'confirm',
                    message: `You are currently logged in to "${config_1.default.data.get('accountName')}". Do you want to log out and log in to a different account?`,
                });
                !setNewkey && this.exit(0);
            }
        };
        this._isLoginSuccess = async () => {
            await api.validateAuthentication();
            this.log('Welcome to the Checkly CLI');
        };
    }
    async run() {
        await this._checkExistingCredentials();
        const mode = await __classPrivateFieldGet(this, _Login_instances, "m", _Login_promptForLoginOrSignUp).call(this);
        const authContext = new auth_1.AuthContext(mode);
        const { openUrl } = await prompts({
            name: 'openUrl',
            type: 'confirm',
            message: `Do you want to open a browser window to continue with ${mode === 'login' ? 'login' : 'sign up'}?`,
            initial: true,
        });
        if (!openUrl) {
            this.log(`Please open the following URL in your browser: \n\n${chalk.cyan(authContext.authenticationUrl)}`);
        }
        else {
            await open(authContext.authenticationUrl);
        }
        const { key, name } = await authContext.getAuth0Credentials();
        config_1.default.auth.set('apiKey', key);
        const { data: accounts } = await api.accounts.getAll();
        const selectedAccount = await (0, exports.selectAccount)(accounts);
        if (!selectedAccount) {
            this.warn('You must select a valid Checkly account name.');
            this.exit(1);
            return;
        }
        config_1.default.data.set('accountId', selectedAccount.id);
        config_1.default.data.set('accountName', selectedAccount.name);
        this.log(`Successfully logged in as ${chalk.cyan.bold(name)}`);
        await this._isLoginSuccess();
        this.exit(0);
    }
}
exports.default = Login;
_Login_instances = new WeakSet(), _Login_promptForLoginOrSignUp = async function _Login_promptForLoginOrSignUp() {
    const { mode } = await prompts({
        name: 'mode',
        type: 'select',
        message: 'Do you want to log in or sign up to Checkly?',
        choices: [{
                title: 'I want to log in with an existing Checkly account',
                value: 'login',
            }, {
                title: 'I want to sign up for a new Checkly account',
                value: 'signup',
            }],
    });
    return mode;
};
Login.hidden = false;
Login.description = 'Login to your Checkly account or create a new one.';
//# sourceMappingURL=login.js.map