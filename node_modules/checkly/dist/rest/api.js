"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.environmentVariables = exports.testSessions = exports.privateLocations = exports.locations = exports.runtimes = exports.assets = exports.projects = exports.user = exports.accounts = exports.api = exports.validateAuthentication = exports.getDefaults = void 0;
const axios_1 = require("axios");
const config_1 = require("../services/config");
const util_1 = require("../services/util");
const accounts_1 = require("./accounts");
const users_1 = require("./users");
const projects_1 = require("./projects");
const assets_1 = require("./assets");
const runtimes_1 = require("./runtimes");
const private_locations_1 = require("./private-locations");
const locations_1 = require("./locations");
const test_sessions_1 = require("./test-sessions");
const environment_variables_1 = require("./environment-variables");
function getDefaults() {
    const apiKey = config_1.default.getApiKey();
    const accountId = config_1.default.getAccountId();
    const baseURL = config_1.default.getApiUrl();
    const Authorization = `Bearer ${apiKey}`;
    return { baseURL, accountId, Authorization, apiKey };
}
exports.getDefaults = getDefaults;
async function validateAuthentication() {
    var _a;
    if (!config_1.default.hasValidCredentials()) {
        throw new Error('Run `npx checkly login` or manually set `CHECKLY_API_KEY` ' +
            '& `CHECKLY_ACCOUNT_ID` environment variables to setup authentication.');
    }
    const accountId = config_1.default.getAccountId();
    const apiKey = config_1.default.getApiKey();
    try {
        // check if credentials works
        await exports.accounts.get(accountId);
    }
    catch (err) {
        if (((_a = err.response) === null || _a === void 0 ? void 0 : _a.status) === 401) {
            throw new Error(`Authentication failed with account id "${accountId}" ` +
                `and API key "...${apiKey === null || apiKey === void 0 ? void 0 : apiKey.slice(-4)}"`);
        }
        else if (!err.response) {
            // The request was made but no response was received. This may be due to an internet connection issue.
            throw new Error(`Encountered an error connecting to Checkly. Please check that the internet connection is working. ${err.message}`);
        }
        else {
            throw new Error(`Encountered an unexpected error connecting to Checkly: ${err.message}`);
        }
    }
}
exports.validateAuthentication = validateAuthentication;
function init() {
    const { baseURL } = getDefaults();
    const axiosConf = (0, util_1.assignProxy)(baseURL, { baseURL });
    const api = axios_1.default.create(axiosConf);
    api.interceptors.request.use(function (config) {
        const { Authorization, accountId } = getDefaults();
        if (Authorization && config.headers) {
            config.headers.Authorization = Authorization;
        }
        if (accountId && config.headers) {
            config.headers['x-checkly-account'] = accountId;
        }
        return config;
    });
    return api;
}
exports.api = init();
exports.accounts = new accounts_1.default(exports.api);
exports.user = new users_1.default(exports.api);
exports.projects = new projects_1.default(exports.api);
exports.assets = new assets_1.default(exports.api);
exports.runtimes = new runtimes_1.default(exports.api);
exports.locations = new locations_1.default(exports.api);
exports.privateLocations = new private_locations_1.default(exports.api);
exports.testSessions = new test_sessions_1.default(exports.api);
exports.environmentVariables = new environment_variables_1.default(exports.api);
//# sourceMappingURL=api.js.map