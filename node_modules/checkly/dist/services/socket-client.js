"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SocketClient = void 0;
const mqtt = require("async-mqtt");
const config_1 = require("../services/config");
// @ts-ignore
const proxy_from_env_1 = require("proxy-from-env");
const tunnel_1 = require("tunnel");
const isHttps = (protocol) => protocol.startsWith('https');
class SocketClient {
    static connect() {
        const url = config_1.default.getMqttUrl();
        const accountId = config_1.default.getAccountId();
        const apiKey = config_1.default.getApiKey();
        const options = {
            reconnectPeriod: 0,
            username: accountId,
            password: apiKey,
        };
        // Replace wss with https so the get proxy url thing the env path
        const proxyUrlEnv = (0, proxy_from_env_1.getProxyForUrl)(url.replace('wss', 'https'));
        if (proxyUrlEnv) {
            const parsedProxyUrl = new URL(proxyUrlEnv);
            const isProxyHttps = isHttps(parsedProxyUrl.protocol);
            const proxy = {
                host: parsedProxyUrl.hostname,
                port: parsedProxyUrl.port,
                protocol: parsedProxyUrl.protocol,
            };
            if (parsedProxyUrl.username && parsedProxyUrl.password) {
                proxy.proxyAuth = `${proxyUrlEnv.username}:${proxyUrlEnv.password}`;
            }
            if (isProxyHttps) {
                options.wsOptions = {
                    agent: (0, tunnel_1.httpsOverHttps)({ proxy }),
                };
            }
            else {
                options.wsOptions = {
                    agent: (0, tunnel_1.httpsOverHttp)({ proxy }),
                };
            }
        }
        return mqtt.connectAsync(`${url}?authenticationScheme=userApiKey`, options, false);
    }
}
exports.SocketClient = SocketClient;
//# sourceMappingURL=socket-client.js.map