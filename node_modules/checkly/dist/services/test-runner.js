"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../rest/api");
const abstract_check_runner_1 = require("./abstract-check-runner");
const uuid = require("uuid");
class TestRunner extends abstract_check_runner_1.default {
    constructor(accountId, project, checks, location, timeout, verbose, shouldRecord, repoInfo, environment) {
        super(accountId, timeout, verbose);
        this.project = project;
        this.checkConstructs = checks;
        this.location = location;
        this.shouldRecord = shouldRecord;
        this.repoInfo = repoInfo;
        this.environment = environment;
    }
    async scheduleChecks(checkRunSuiteId) {
        var _a, _b, _c;
        const checkRunIdMap = new Map(this.checkConstructs.map((check) => [uuid.v4(), check]));
        const checkRunJobs = Array.from(checkRunIdMap.entries()).map(([checkRunId, check]) => ({
            ...check.synthesize(),
            group: check.groupId ? this.project.data['check-group'][check.groupId.ref].synthesize() : undefined,
            groupId: undefined,
            sourceInfo: { checkRunSuiteId, checkRunId },
            logicalId: check.logicalId,
            filePath: check.getSourceFile(),
        }));
        try {
            if (!checkRunJobs.length) {
                throw new Error('Unable to find checks to run.');
            }
            const { data } = await api_1.testSessions.run({
                name: this.project.name,
                checkRunJobs,
                project: { logicalId: this.project.logicalId },
                runLocation: this.location,
                repoInfo: this.repoInfo,
                environment: this.environment,
                shouldRecord: this.shouldRecord,
            });
            const { testSessionId, testResultIds } = data;
            const checks = Array.from(checkRunIdMap.entries())
                .map(([checkRunId, check]) => ({ check, checkRunId, testResultId: testResultIds === null || testResultIds === void 0 ? void 0 : testResultIds[check.logicalId] }));
            return { testSessionId, checks };
        }
        catch (err) {
            throw new Error((_c = (_b = (_a = err.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.message) !== null && _c !== void 0 ? _c : err.message);
        }
    }
}
exports.default = TestRunner;
//# sourceMappingURL=test-runner.js.map